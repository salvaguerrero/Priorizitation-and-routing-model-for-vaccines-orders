# -*- coding: utf-8 -*-
"""ahp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lgXfpFBqeXnOY3fa1Hz7VKTWQYHvuOfS

# AHP model: 
Ranking vaccines need per country and per time.
"""

import numpy as np
import pandas as pd

import random
import sys, os
import csv 

# Disable
def blockPrint():
    sys.stdout = open(os.devnull, 'w')

# Restore
def enablePrint():
    sys.stdout = sys.__stdout__



#enablePrint()

def ahp(Deley,AMD):

  blockPrint()

  """# Aux function:"""
  
  def map(mat):
  #Mapping and invert the half matrix:
  #Xmap =  (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min
  
    max = int(mat.max())
    min = int(mat.min())
    for i in range(np.shape(mat)[0]):
      for j in range(np.shape(mat)[0]):
        if i>j:
          mat[j,i] =  (int(mat[j,i]) - min) * (9 - 1) / (max - min) + 1
          mat[i,j] = 1/mat[j,i]
    return A
  
  
  def AHP_weight(df):
  
    df = df.div(df.sum(axis=0), axis=1)
    df.loc['total'] = df.sum(axis=0)
    
    df['Weight'] = df.mean(axis=1)
    df['Weight']['total'] = np.nan
    return(df)
  
  
  #Criterias:
  cri = ["Health","Government","Logistic"]
  #Subcriterias:
  sub = {
      "Health": ['Pop. Density', 'Vac. Coverage', 'Pop. Movement', 'Famine'],
      "Government": ['Government Effectiveness', 'Health Workers Density', 'Health Workers expenditure'],
      "Logistic": ['amd','deley']
  }
  #Vaccines:
  vac = ['BCG','DTwP','Measles']
  #Countries:                                   
  co = ['Somalia', 'Papua New Guinea', 'South Sudan', 'Chad', 'CAR', 'Nigeria', 'Ethiopia', 'Yemen', 'Congo', 'Sierra Leone', 'DRC', 'Guinea', 'Haiti', 'Madagascar', 'Syria']      #Countries
  #Countris ISO code:
  co_code = ['SOM', 'PNG', 'SSD', 'TCD', 'CRI', 'NGA', 'ETH', 'YEM', 'COG', 'SLE', 'COD', 'GIN', 'HTI', 'MDG', 'SYR' ]
  
  #Time:
  tmax = 12
  nt = range(0, tmax, 1)
  
  Matrix_dic = {}
  
  #Main Criteria:
  MC = np.matrix([[1, 1, 10],
                  [1, 1, 10],
                  [1/10, 1/10, 1]])
  Matrix_dic['main'] = AHP_weight( pd.DataFrame(MC,columns=cri,index=cri) )
  print('Main Criteria \n', Matrix_dic['main'])
  
  
  #Sub Criterias:
  #Logistic
  A = np.matrix([[1, 1],
                 [1, 1]])
  Matrix_dic['Logistic'] = AHP_weight( pd.DataFrame(A,columns=sub['Logistic'],index=sub['Logistic']) )
  print('Sub Criteria: Logistics \n',Matrix_dic['Logistic'])
  
  #Health
  A = np.matrix([[1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1]])
  Matrix_dic["Health"] = AHP_weight( pd.DataFrame(A,columns=sub['Health'],index=sub['Health']) )
  print('Sub Criteria: Health \n',Matrix_dic['Health'])
  
  #Government
  A = np.matrix([[1, 1, 1],
                [1, 1, 1],
                [1, 1, 1]])
  Matrix_dic["Government"] = AHP_weight( pd.DataFrame(A,columns=sub['Government'],index=sub['Government']) )
  print('Sub Criteria: Government \n',Matrix_dic['Government'])
  
  D_df = pd.read_csv("data\Countries_dem.csv",sep=";",thousands='.')
  print(D_df)
  
  
  """# 1. Health
  ># 1.1 Pop. Density
  """
  
  POP_df = pd.read_csv('data\pop_den_clean.csv')  
  A = np.zeros( ( len(vac)*len(co) , len(vac)*len(co) ) )
  
  i = 0
  j = 0
  
  #row index: i
  a = 0
  ii = 0
  b = 0
  jj = 0
  
  for ci in co_code:
    a = POP_df[POP_df['Co_code']==ci]
    ii = a['2020'].values[0]
    for vi in vac:
       
          #column index: j
          for cj in co_code:
            a = POP_df[POP_df['Co_code']==cj]
            jj = a['2020'].values[0]
            for vj in vac:
  
                  A[i,j] = ii - jj
                  j = j + 1  
                    
          j = 0
          i = 1 + i
  
  print(A)
  Matrix_dic[cri[0], sub[cri[0]][0] ] = AHP_weight( pd.DataFrame( map(A) ) )
  
  """># 1.2 Vac Coverage
  
  """
  
  A = np.zeros( ( len(vac)*len(co) , len(vac)*len(co) ) )
  
  cov_df = pd.read_csv('data\Countries_cov.csv',sep=';')  
  
  i = 0
  j = 0
  #row index: i
  for cii,ci in enumerate(co_code):
    for vi in vac:
  
          #column index: j
          for cjj,cj in enumerate(co_code):
            for vj in vac:
  
                  cov_i = cov_df[vi][cii]*100
                  cov_j = cov_df[vj][cjj]*100
  
                  A[i,j] = cov_i - cov_j
                  j = j + 1  
          j = 0
          i = 1 + i
  print(A)
  Matrix_dic[cri[0], sub[cri[0]][1] ] = AHP_weight( pd.DataFrame( map(A) ) )
  
  """># 1.2 Pop. Movement"""
  
  POPM_df = pd.read_csv('data\pop_mov_clean.csv')  
  A = np.zeros( ( len(vac)*len(co) , len(vac)*len(co) ) )
  
  i = 0
  j = 0
  
  #row index: i
  a = 0
  ii = 0
  b = 0
  jj = 0
  
  for ci in co_code:
    a = POPM_df[POPM_df['ISO']==ci]
    ii = a['mov'].values[0]
    for vi in vac:
        
          #column index: j
          for cj in co_code:
            a = POPM_df[POPM_df['ISO']==cj]
            jj = a['mov'].values[0]
            for vj in vac:
  
                  A[i,j] = ii - jj
                  j = j + 1                   
          j = 0
          i = 1 + i
  
  print(A)
  Matrix_dic[cri[0], sub[cri[0]][2] ] = AHP_weight( pd.DataFrame( map(A) ) )
  
  """># 1.4 Famine"""
  
  FAM_df = pd.read_csv('data\hungerindex_clean.csv')  
  A = np.zeros( ( len(vac)*len(co) , len(vac)*len(co) ) )
  
  i = 0
  j = 0
  
  #row index: i
  a = 0
  ii = 0
  b = 0
  jj = 0
  
  for ci in co_code:
    a = FAM_df[FAM_df['ISO']==ci]
    ii = a['val'].values[0]
    for vi in vac:
        
          #column index: j
          for cj in co_code:
            a = FAM_df[FAM_df['ISO']==cj]
            jj = a['val'].values[0]
            for vj in vac:
                  A[i,j] = ii - jj
                  j = j + 1                   
          j = 0
          i = 1 + i
  
  print(A)
  Matrix_dic[cri[0], sub[cri[0]][3] ] = AHP_weight( pd.DataFrame( map(A) ) )
  
  """
  
  
  
  # 2. Government
  ># 2.1 Country Effectiveness
  
  
  
  """
  
  GE_df = pd.read_csv('data\GE.csv')  
  A = np.zeros( ( len(vac)*len(co) , len(vac)*len(co) ) )
  
  i = 0
  j = 0
  
  #row index: i
  a = 0
  ii = 0
  b = 0
  jj = 0
  
  for ci in co_code:
    a = GE_df[GE_df['Co_code']==ci]
    ii = a['Rank'].values[0]
    for vi in vac:
        
          #column index: j
          for cj in co_code:
            a = GE_df[GE_df['Co_code']==cj]
            jj = a['Rank'].values[0]
            for vj in vac:
                  
                  A[i,j] = ii - jj
                  j = j + 1  
                    
          j = 0
          i = 1 + i
  
  print(A)
  Matrix_dic[cri[1], sub[cri[1]][0] ] = AHP_weight( pd.DataFrame( map(A) ) )
  
  """># 2.2 Health Workers Density"""
  
  FAM_df = pd.read_csv("data/nursing_10000_clean.csv")  
  A = np.zeros( ( len(vac)*len(co) , len(vac)*len(co) ) )
  
  i = 0
  j = 0
  
  #row index: i
  a = 0
  ii = 0
  b = 0
  jj = 0
  
  for ci in co_code:
    a = FAM_df[FAM_df['ISO']==ci]
    ii = a['val'].values[0]
    for vi in vac:
        
          #column index: j
          for cj in co_code:
            a = FAM_df[FAM_df['ISO']==cj]
            jj = a['val'].values[0]
            for vj in vac:
                  A[i,j] = ii - jj
                  j = j + 1                   
          j = 0
          i = 1 + i
  
  print(A)
  Matrix_dic[cri[1], sub[cri[1]][1] ] = AHP_weight( pd.DataFrame( map(A) ) )
  
  """># 2.3 Health government expenditure"""
  
  GE_df = pd.read_csv('data\health_exp_clean.csv')  
  A = np.zeros( ( len(vac)*len(co) , len(vac)*len(co) ) )
  
  i = 0
  j = 0
  
  #row index: i
  a = 0
  ii = 0
  b = 0
  jj = 0
  
  for ci in co_code:
    a = GE_df[GE_df['Co_code']==ci]
    ii = a['2020'].values[0]
    for vi in vac:
        
          #column index: j
          for cj in co_code:
            a = GE_df[GE_df['Co_code']==cj]
            jj = a['2020'].values[0]
            for vj in vac:
                  
                  A[i,j] = ii - jj
                  j = j + 1  
                    
          j = 0
          i = 1 + i
  
  print(A)
  Matrix_dic[ cri[1], sub[cri[1]][2] ] = AHP_weight( pd.DataFrame( map(A) ) )
  
  
  """# 3. Logistic
  ># 3.1 amd
  """
  
  A = np.zeros( ( len(vac)*len(co) , len(vac)*len(co) ) )
  i = 0
  j = 0
  #row index: i
  for cii,ci in enumerate(co_code):
    for vi in vac:
  
          #column index: j
          for cjj,cj in enumerate(co_code):
            for vj in vac:
  
                  amd_i = AMD[ci,vi] 
                  amd_j = AMD[cj,vj]
  
                  A[i,j] = amd_i - amd_j + 1    #The +1 donot affect the pairwise comparation but will solve division by 0 error. 
                  j = j + 1  
          j = 0
          i = 1 + i
  print(A)
  Matrix_dic[cri[2], sub[cri[2]][0] ] = AHP_weight( pd.DataFrame( A ) )
  
  A = np.zeros( ( len(vac)*len(co) , len(vac)*len(co) ) )
  
  """# 3. Logistic
  ># 3.1 Deley
  """
  i = 0
  j = 0
  #row index: i
  for cii,ci in enumerate(co_code):
    for vi in vac:
  
          #column index: j
          for cjj,cj in enumerate(co_code):
            for vj in vac:
  
                  del_i = Deley[ci,vi] 
                  del_j = Deley[cj,vj] 
  
                  A[i,j] = del_i - del_j + 1   #The +1 donot affect the pairwise comparation but will solve division by 0 error. 
                  j = j + 1  
          j = 0
          i = 1 + i


  print(A)

  Matrix_dic[cri[2], sub[cri[2]][1] ] = AHP_weight( pd.DataFrame( A ) )
  
  
  
  
  
  
  
  """# Weights calculation"""
  
  alpha = 100 #Scaling factor
  Priority = np.zeros( ( len(vac)*len(co) ,1 ) )
  
  for i in range( len(vac)*len(co) ):
    for j,jj in enumerate(cri):
      for k,kk in enumerate(sub[jj]):
        Priority[i] = alpha*Matrix_dic['main']['Weight'][j]*Matrix_dic[jj]['Weight'][k]*Matrix_dic[jj,kk]['Weight'][i] + Priority[i]
      #                *   weight del criterio jj      *weight del subcriterio k dentro del criterio jj * weight del elemento i 
  """# AHP to income"""
  
  v = {}
  
  i = 0
  for ci in co_code:
    for vi in vac:
          v[ci,vi] = Priority[i]
          i = i + 1
  
#   df = pd.DataFrame.from_dict(data=v, orient='index')
  
#   out =  'income-' + str('testing') + '.csv'
#   df.to_csv( out , header=False)

  enablePrint()
  return v